/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp GRAVE          &kp N1           &kp N2           &kp N3             &kp N4               &kp N5                            &kp N6  &kp N7                &kp N8              &kp N9            &kp N0               &kp MINUS
&kp TAB            &kp Q            &kp W            &kp E              &kp R                &kp T                             &kp Y   &kp U                 &kp I               &kp O             &kp P                &kp BSLH
&hml LCTRL ESCAPE  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LEFT_CONTROL F  &kp G                             &kp H   &hmr RIGHT_CONTROL J  &hmr RIGHT_SHIFT K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMI  &kp APOS
&kp LSHFT          &kp Z            &kp X            &kp C              &kp V                &kp B     &trans       &trans     &kp N   &kp M                 &kp COMMA           &kp DOT           &kp FSLH             &kp EQUAL
                                    &trans           &trans             &kp LALT             &kp LGUI  &kp SPACE    &kp ENTER  &mo 1   &trans                &trans              &trans
            >;
        };

        layer_1 {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                    &kp F7    &kp F8         &kp F9       &kp F10    &kp F11        &kp F12
&trans  &trans  &trans  &trans  &trans  &trans                    &kp END   &kp PAGE_DOWN  &kp PAGE_UP  &kp HOME   &kp BACKSPACE  &kp LBKT
&trans  &trans  &trans  &trans  &trans  &trans                    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &kp ENTER      &kp RBKT
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans         &trans       &trans     &trans         &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans    &to 2          &trans       &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans          &trans          &trans          &trans           &trans                             &trans  &kp N7  &kp N8   &kp N9     &kp STAR   &trans
&trans  &trans          &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans                             &trans  &kp N4  &kp N5   &kp N6     &kp PLUS   &trans
&trans  &msc SCRL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_RIGHT                    &trans  &kp N1  &kp N2   &kp N3     &kp MINUS  &trans
&trans  &trans          &msc SCRL_UP    &msc SCRL_DOWN  &trans           &trans           &trans    &trans  &trans  &kp N0  &kp DOT  &kp EQUAL  &kp FSLH   &trans
                        &trans          &trans          &trans           &trans           &trans    &trans  &trans  &to 0   &trans   &trans
            >;
        };
    };
};
